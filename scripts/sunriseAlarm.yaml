blueprint:
  name: Wake-up light alarm with sunrise effect
  description: "Brightness and color temperature sunrise effect"
  domain: automation
  input:
    light_entity:
      name: Wake-up light entity
      description: The light to control.
      selector:
        entity:
          domain: light
    manual_time:
      name: Manual alarm time
      description: Time to trigger alarm
      default: "6:30:00"
      selector:
        time: {}
    sunrise_duration:
      name: Sunrise duration
      description: The sunrise will start the configured number of minutes before the timestamp.
      default: 25
      selector:
        number:
          min: 5.0
          max: 60.0
          step: 5.0
          unit_of_measurement: min
          mode: slider
    start_brightness:
      name: Minimum brightness
      description: The brightness to start with. Some lights ignore very low values and may turn on with full brightness instead!
      default: 1
      selector:
        number:
          min: 1.0
          max: 255.0
          step: 1.0
          mode: slider
    end_brightness:
      name: Maximum brightness
      description: The brightness will be transitioned from the minimum to the configured value.
      default: 254
      selector:
        number:
          min: 5.0
          max: 255.0
          step: 1.0
          mode: slider
    min_mired:
      name: Minimum color temperature
      description: "The minimum color temperature to use. (0: lowest supported)"
      default: 0
      selector:
        number:
          min: 0.0
          max: 500.0
          step: 5.0
          mode: slider
          unit_of_measurement: mired
    pre_sunrise_actions:
      name: Pre-sunrise actions
      description: Optional actions to run before sunrise starts.
      default: []
      selector:
        action: {}
    post_sunrise_actions:
      name: Post-sunrise actions
      description: Optional actions to run after sunrise ends (around the alarm time).
      default: []
      selector:
        action: {}
variables:
  light_entity: !input "light_entity"
  sunrise_duration: !input "sunrise_duration"
  start_brightness: !input "start_brightness"
  end_brightness: !input "end_brightness"
  range_brightness: "{{float(end_brightness)-float(start_brightness)}}"
  manual_time: !input "manual_time"
  seconds: "{{float(sunrise_duration) * 60}}"
  min_mired: !input "min_mired"
  start_mired: "{{state_attr(light_entity, 'max_mireds')}}"
  end_mired: "{{[state_attr(light_entity, 'min_mireds')|int(0), min_mired|int(0)]|max}}"
  tick_time: "{{float(seconds) / float(range_brightness)}}"
trigger:
  - platform: time_pattern
    minutes: "*"
condition: []
action:
  - variables:
      sensor_time: "{{ manual_time }}"
  - choose: []
    default: !input "pre_sunrise_actions"
  - service: light.turn_on
    data:
      brightness: "{{ start_brightness }}"
      color_temp: "{{ start_mired if state_attr(light_entity, 'min_mireds') != None else omit }}"
    entity_id: !input "light_entity"
  - repeat:
      while:
        - condition: template
          value_template: >
            {{ 0 < as_timestamp(sensor_time) - as_timestamp(now()) <= float(seconds) }}
      sequence:
        - delay: "{{ tick_time }}"
        - service: light.turn_on
          data:
            brightness: "{{(float(start_brightness) + ((as_timestamp(sensor_time) - as_timestamp(now())/float(seconds)))*(float(range_brightness)))| int(0)}}"
            color_temp: >
              {% if state_attr(light_entity, 'min_mireds') != None %}
                {{ (float(end_mired) + (float(start_mired) - float(end_mired)) * ((as_timestamp(sensor_time) - as_timestamp(now())) / float(seconds))) | int(0) }}
              {% else %}
                {{ omit }}
              {% endif %}
          entity_id: !input "light_entity"
  - choose: []
    default: !input "post_sunrise_actions"
mode: single
max_exceeded: silent